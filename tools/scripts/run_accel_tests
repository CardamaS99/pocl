#!/bin/bash
# run_tta_tests - Runs tests against the tta device drivers.
#
# Copyright (c) 2021 Michal Babe / Tampere University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

export POCL_BUILDING=1

if [ -z "$POCL_ACCEL0_PARAMETERS" ]; then
  export POCL_DEVICES=accel
  export POCL_ACCEL0_PARAMETERS="0xE,1,2,4,9"
fi

if [ -z "$OCL_ICD_VENDORS" ]; then
  export OCL_ICD_VENDORS=$PWD/ocl-vendors
fi

if [ ! -e "$OCL_ICD_VENDORS" ]; then
  echo "OCL_ICD_VENDORS: $OCL_ICD_VENDORS doesn't exist"
  exit 1
fi

echo "Using OCL_ICD_VENDORS: $OCL_ICD_VENDORS"
echo "Using ACCEL0 params: $POCL_ACCEL0_PARAMETERS"

if [ -z "$LLVM" ]; then
  LLVM=0
fi

if [ "$LLVM" -eq "0" ]; then
  echo "running accel emulation tests without LLVM"
  ctest -L accel_no_LLVM $@
else
  echo "running accel tests with LLVM"
  ctest -L accel_LLVM $@
fi


declare -a TTATests=("axim_sep" "axim_fused_global_cq" "axim_fused_global_private" "axim_fused_global_cq_private" \
"relative_sep" "relative_fused_global_cq" "relative_fused_global_private" "relative_fused_global_cq_private")


#figure out if ENABLE_TCEMC=1, then run tests on ttasim
if grep ^ENABLE_TCEMC CMakeCache.txt | cut -d '=' -f 2 | grep -q 1
then
  echo "Running Accel tests on TTASim with different TTA configurations"

  for val in ${TTATests[@]}; do
    export POCL_ACCEL0_PARAMETERS="0xB,$PWD/examples/accel/firmwares/$val,1,2,65535"

    echo "Using ACCEL0 params: $POCL_ACCEL0_PARAMETERS"

    #exclude countred and f32 tests due to not having tta with support for them
    #Runs basically only
    # Accel_no_LLVM : add.i32 and mul.i32
    # Accel_LLVM : example0
    ctest -L "accel_no_LLVM|accel_LLVM" -E "countred|f32|example1" $@


    # Cross-compile example0 for future pynq tests.
    # Save the hash for future use.
    TTA_DEVICE_HASH=$(POCL_DEBUG=accel poclcc -o \
    $PWD/examples/example0/${val}_example0.poclbin \
    ../examples/example0/example0.cl 2>&1 | \
    grep "TCE DEVICE HASH"|cut -d "=" -f 2 | cut -d "[" -f 1)

    echo "${val}:$TTA_DEVICE_HASH" >> $PWD/examples/example0/hashes.txt

  done
fi


if [ "$1" = "--pynq" ]
then
  PYNQ_AVAILABLE=1
fi

# Run tests on PYNQ-Z1 device
if ! [ -z ${PYNQ_AVAILABLE} ]
then
  echo "Running Accel tests on PYNQ with different TTA configurations"

  for val in ${TTATests[@]}; do
    # Check for existence of all the necessary files before launching the tests
    # The files are generated during make and when running the above ttasim
    # tests on the host machine

    # Bitstream files needed by all tta configuration tests:
    if [ ! -f $PWD/examples/accel/bitstreams/${val}.bit ]; then
      echo "$PWD/examples/accel/bitstreams/${val}.bit doesn't exist.\
            Please copy it from the host machine"
      exit 1
    fi
    if [ ! -f $PWD/examples/accel/bitstreams/${val}.hwh ]; then
      echo "$PWD/examples/accel/bitstreams/${val}.hwh doesn't exist.\
            Please copy it from the host machine"
      exit 1
    fi

    # Firmare file which implements pocl.add.i32 and pocl.mul.i32
    if [ ! -f $PWD/examples/accel/firmware_imgs/${val}.img ]; then
      echo "$PWD/examples/accel/firmware_imgs/${val}.img doesn't exist.\
            Please copy it from the host machine"
      exit 1
    fi

    # Files needed for the cross-compilation example0
    if [ ! -f $PWD/examples/example0/hashes.txt ]; then
      echo "$PWD/examples/example0/hashes.txt doesn't exist.\
            Please copy it from the host machine"
      exit 1
    fi
    if [ ! -f $PWD/examples/example0/${val}_example0.poclbin ]; then
      echo "$PWD/examples/example0/${val}_example0.poclbin doesn't exist.\
            Please copy it from the host machine"
      exit 1
    fi

    export POCL_ACCEL0_PARAMETERS="0x43C00000,$PWD/examples/accel/firmware_imgs/$val,1,2,65535"
    sudo -E python -c "from pynq import Overlay;Overlay('$PWD/examples/accel/bitstreams/${val}.bit')"

    tta_hash=$(grep -m 1 ${val} "$PWD/examples/example0/hashes.txt" |cut -d ":" -f 2)
    export POCL_ACCEL0_HASH="${tta_hash}"

    # Copy cross-compiled program file to ./example0.poclbin to avoid
    # having to pass the poclbin filename through ctest
    cp "$PWD/examples/example0/${val}_example0.poclbin" "$PWD/examples/example0/example0.poclbin"

    # Run 2 built-in kernel test and one cross-compiled poclbin test
    echo "Using ACCEL0 params: $POCL_ACCEL0_PARAMETERS and hash: $POCL_ACCEL0_HASH"
    sudo -E ctest -R "examples/accel/.*i32|example0_poclbin" $@

    rm "$PWD/examples/example0/example0.poclbin"
  done

  #Run HLS generated core
  echo "Running Accel HLS tests"
  export POCL_ACCEL0_PARAMETERS="0x40000000,dummy,1,2"
  sudo -E python -c "from pynq import Overlay;Overlay('$PWD/examples/accel/hls/bitstreams/vecadd_1.bit')"

  echo "Using ACCEL0 params: $POCL_ACCEL0_PARAMETERS"
  sudo -E ctest -R "examples/accel/.*i32" $@
fi

