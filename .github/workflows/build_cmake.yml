---
name: CMake Build Matrix

on: [workflow_dispatch, push, pull_request]

env:
  POCL_CACHE_DIR: "/tmp/GH_POCL_CACHE"
  POCL_KERNEL_CACHE: "0"
  POCL_MAX_WORK_GROUP_SIZE: "1024"
  POCL_MEMORY_LIMIT: "2"
  CCACHE_COMPRESS: "true"
  CCACHE_COMPRESSLEVEL: "1"
  CCACHE_MAXSIZE: "25000M"
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: /home/github/ccache_storage

jobs:
  build:
    name: LLVM ${{ matrix.llvm }} - ${{ matrix.config }}
    runs-on: [self-hosted, linux, x64]
    strategy:
      fail-fast: false
      matrix:
        llvm: [15]
        # basic = simplest pthread build
        # devel = with devel options
        # cts_spirv = cts with SPIR-V
        # tier1 = includes CTS without SPIR-V
        # asan, tsan, ubsan = sanitizers
        config: [basic, devel, asan, cts_spirv, tier1]
        include:
          - llvm: 11
            config: basic
          - llvm: 12
            config: basic
          - llvm: 13
            config: basic
          - llvm: 14
            config: basic
          - llvm: 15
            config: tsan
          - llvm: 15
            config: ubsan

    steps:
      - uses: actions/checkout@v3

      - name: Run CMake
        id: cmake
        run: |
          CMAKE_ARGS=""
          if [ "${{ matrix.config }}" == "asan" ]; then
            CMAKE_ARGS="-DENABLE_ASAN=1 -DENABLE_ICD=0 -DENABLE_LOADABLE_DRIVERS=0"
          elif [ "${{ matrix.config }}" == "tsan" ]; then
            CMAKE_ARGS="-DENABLE_TSAN=1 -DENABLE_ICD=0 -DENABLE_LOADABLE_DRIVERS=0"
          elif [ "${{ matrix.config }}" == "ubsan" ]; then
            CMAKE_ARGS="-DENABLE_UBSAN=1 -DENABLE_LATEST_CXX_STD=ON -DENABLE_ICD=0 -DENABLE_LOADABLE_DRIVERS=0"
          elif [ "${{ matrix.config }}" == "basic" ]; then
            CMAKE_ARGS="-DENABLE_ICD=1"
          elif [ "${{ matrix.config }}" == "devel" ]; then
            CMAKE_ARGS="-DDEVELOPER_MODE=ON -DENABLE_RELOCATION=0 -DENABLE_VALGRIND=1 -DENABLE_EXTRA_VALIDITY_CHECKS=1"
          elif [ "${{ matrix.config }}" == "cts_spirv" ]; then
            CMAKE_ARGS="-DENABLE_TESTSUITES=conformance -DENABLE_CONFORMANCE=ON"
          elif [ "${{ matrix.config }}" == "tier1" ]; then
            CMAKE_ARGS="'-DENABLE_TESTSUITES=AMDSDK3.0;piglit;conformance;PyOpenCL;IntelSVM' -DENABLE_CONFORMANCE=ON -DTESTSUITE_SOURCE_BASEDIR=/home/github/source"
          else
            echo "Unknown configuration"
          fi
          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }} -DLLVM_SPIRV=/usr/bin/llvm-spirv-${{ matrix.llvm }} -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=-O1 -march=native -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable" "-DCMAKE_CXX_FLAGS_RELEASE=-O1 -march=native -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable" $CMAKE_ARGS -B ${{ github.workspace }}/build ${{ github.workspace }}

      - name: Run Build
        id: build
        run: |
          cd ${{ github.workspace }}/build && make -j$(nproc)
          if [ "${{ matrix.config }}" == "cts_spirv" ] || [ "${{ matrix.config }}" == "tier1" ]; then
            make -j$(nproc) prepare_examples
          fi

      - name: Run Tests
        id: ctest
        run: |
          CTEST_ARGS=""
          if [ "${{ matrix.config }}" == "asan" ]; then
            CTEST_ARGS="-L 'runtime|asan'"
          elif [ "${{ matrix.config }}" == "tsan" ]; then
            CTEST_ARGS="-L 'internal|tsan'"
          elif [ "${{ matrix.config }}" == "ubsan" ]; then
            CTEST_ARGS="-L 'internal|ubsan'"
          elif [ "${{ matrix.config }}" == "basic" ]; then
            CTEST_ARGS="-L internal"
          elif [ "${{ matrix.config }}" == "devel" ]; then
            CTEST_ARGS="-L internal"
          elif [ "${{ matrix.config }}" == "cts_spirv" ]; then
            CTEST_ARGS="-L conformance_suite_micro_spirv"
          elif [ "${{ matrix.config }}" == "tier1" ]; then
            CTEST_ARGS="-L 'amdsdk_30|piglit|PyOpenCL|conformance_suite_micro_main|IntelSVM'"
          else
            echo "Unknown configuration"
          fi
          cd ${{ github.workspace }}/build && ctest --output-on-failure -j$(nproc) $CTEST_ARGS
